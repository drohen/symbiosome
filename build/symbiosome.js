var o=class{constructor(t){if(this.context=t,this.portals={},this.listeners={},this.channelID=`symbiosome__${window.location.origin}`,this.context.debug?.("Channel ID",[this.channelID]),this.context.isPortal){let s=new URLSearchParams(window.location.search).get("parent");this.context.debug?.("Parent origin",[s]),this.parent=!s||s===window.origin?void 0:window.parent,this.parentOrigin=this.parent&&s?s:void 0,this.parentOrigin||this.context.debug?.("Is portal but parent is undefined"),this.handlePortalMessage=this.handlePortalMessage.bind(this),window.addEventListener("message",this.handlePortalMessage,!1)}this.broadcastChannel=new BroadcastChannel(this.channelID),this.handleBroadcast=this.handleBroadcast.bind(this),this.broadcastChannel.addEventListener("message",this.handleBroadcast),this.addPortal=this.addPortal.bind(this),this.listenToOrigin=this.listenToOrigin.bind(this),this.pushToOrigin=this.pushToOrigin.bind(this),this.context.onPortalAdded?.(window.origin)}handleBroadcast(t){if(this.context.debug?.("Incoming broadcast",[t]),!this.listeners[t.data.origin]){this.context.debug?.("Broadcast received from unlisted origin",[t]);return}this.listeners[t.data.origin](t.data.origin,t.data.data)}broadcast(t,s){this.broadcastChannel.postMessage({origin:t,data:s}),this.listeners[t]&&this.listeners[t](t,s)}handlePortalMessage(t){if(this.context.debug?.("Incoming message",[t]),t.origin!==this.parentOrigin){this.context.debug?.(`Incoming message from ${t.origin} not from parent ${this.parentOrigin}`,[t]);return}this.broadcast(t.origin,t.data)}createFrame(t){let s=document.createElement("iframe");return s.name=t,s.width="1",s.height="1",s.style.visibility="hidden",s.style.position="absolute",document.body.append(s),s}listenToOrigin(t,s,e){let i=new URL(t).origin;if(this.listeners[i])throw Error(`Listener for ${i} already exists.`);this.listeners[i]=s,(e??this.context.onListenToOrigin)?.(i)}addPortal(t,s){let e=new URL(t),i=e.origin;if(i===window.origin)throw Error(`Portal ${origin} is own origin and is always connected.`);if(this.portals[i])throw Error(`Portal ${i} already connected.`);let n=this.createFrame(i);e.searchParams.set("parent",window.origin),n.src=e.toString();let r=n.contentWindow;if(!r)throw Error(`Couldn't get reference for ${i}.`);this.portals[i]={frame:n,window:r},(s??this.context.onPortalAdded)?.(i)}pushToOrigin(t,s,e){if(t===window.origin)this.broadcast(t,s);else{if(!this.portals[t])throw Error(`Cannot push to missing portal ${t}.`);this.portals[t].window.postMessage(s,t)}(e??this.context.onPushedMessage)?.(t,s)}removePortal(t,s){if(t===window.origin)throw Error(`Origin ${t} is this origin, removal not possible.`);if(!this.portals[t])throw Error(`Cannot remove missing portal ${t}.`);this.portals[t].frame.remove(),delete this.portals[t],(s??this.context.onPortalRemoved)?.(t)}removeListener(t,s){if(!this.listeners[t])throw Error(`Cannot remove missing listener ${t}.`);delete this.listeners[t],(s??this.context.onListenerRemoved)?.(t)}getOrigins(){let t=Object.assign({},this.portals);return Object.assign(t,this.listeners),Object.keys(t)}};export{o as Symbiosome};
